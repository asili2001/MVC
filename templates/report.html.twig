{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="content">
        <h1>Report</h1>
        <div class="report">
            <div class="btns">
                <a href="#kmom01" alt="kmom01" class="btn">Kmom01</a>
                <a href="#kmom02" alt="kmom02" class="btn">Kmom02</a>
                <a href="#kmom03" alt="kmom03" class="btn">Kmom03</a>
            </div>
            <div class="report-list">
                <div class="item" id="kmom01">
                    <h2>Kmom01</h2>
                    <p>
                        I KMOM01 fick vi börja använda Symfony, vilket är ett PHP-ramverk som följer en modell-visning-kontroll (MVC)-arkitektur.
                        <br><br>
                        Tidigare har jag arbetat med MVC i PHP och skapat en app-skeleton från scratch, vilket finns i min GitHub-repo.
                        Däremot har jag inte använt Symfony tidigare.
                        <br><br>
                        Kodstrukturen är väldigt användarvänlig, men jag anser att Symfony gör det ännu enklare att skapa applikationer med bra struktur,
                        vilket kan upplevas som en nackdel då man inte nödvändigtvis förstår vad som händer bakom kulisserna.
                        <br><br>
                        Personligen föredrar jag att förstå vad jag sysslar med innan jag använder ett ramverk och skulle därför föredra att köra "vanilla PHP", 
                        vilket gör att man förstår allt man gör.
                        <br><br>
                        Det som intresserade mig mest i artikeln "PHP The Right Way" var delen om "Web Application Security".
                        <br><br>
                        Det är mycket viktigt med säkerhet i en webbapplikation eftersom det finns personer som är redo att hacka in i din applikation.
                        <br><br>
                        Min TIL för detta kursmoment är att jag har fått testa på Symfony.

                    </p>
                </div>
                <div class="item" id="kmom02">
                    <h2>Kmom02</h2>
                    <p>
                        I kmom02 har vi lärt oss arv, komposition, interface och trait. Arv (engelska: "inheritance") används när man vill ärva egenskaper (properties) och metoder (methods) från en överordnad (base/parent) klass. Till exempel kan "PaymentMethod" vara en överordnad klass och "Swish" en underordnad (child) klass som ärver funktioner från sin överordnade klass.
                        <br><br>
                        Komposition (engelska: "composition") är när en klass använder en annan klass som en del av sin egen funktionalitet.
                        <br><br>
                        Ett interface definierar en uppsättning metoder och egenskaper som en klass som implementerar interfacet måste ha. Ett interface fungerar som en slags ritning eller mall över hur en klass ska se ut och vilka metoder som den ska innehålla. När en klass implementerar ett interface, måste den implementera alla metoder som definieras i interfacet.
                        <br><br>
                        Ett trait är i princip ett återanvändbart kodblock som kan inkluderas i en eller flera klasser. När en klass använder ett trait, införlivas kodblocket i klassen och dess funktioner och egenskaper blir tillgängliga för klassen. På så sätt kan man undvika upprepning av kod och uppnå högre modularitet i koden.
                        <br><br>
                        I min implementation har jag använt mig av olika objektorienterade tekniker för att skapa en fungerande kod. För att åstadkomma en enhetlig struktur på alla returdata från API:et använde jag mig av ett trait som heter "Returner". Detta trait inkluderar en funktion som heter "ArrReturner" som används för att skapa en enhetlig struktur på data som ska returneras.
                        <br><br><br>
                        Jag använde också komposition i både "DeckOfCards" och "HandOfCards"-klasserna. Detta innebär att jag inkluderade en instans av en annan klass inuti dessa klasser för att återanvända funktionalitet.
                        <br><br>
                        I klassen "CardGraphic" använde jag mig av arv för att ärva funktionalitet från klassen "Card".
                        <br><br>
                        Jag implementerade också Custom Exceptions för att hantera eventuella fel som kan uppstå i koden och arbetade med hur man kan hantera dessa på ett korrekt sätt.
                        <br><br>
                        Jag är nöjd med hur jag har kunnat tillämpa det jag har lärt mig och mer i kursmoment 02, men jag är medveten om att min webbplats kan förbättras med en bättre design, vilket jag hoppas kunna ta itu med i framtiden.
                        <br><br><br>
                        Jag löste uppgiften utan att använda pseudokod. I stället började jag med att planera och organisera koden genom att bryta ner problemet i mindre delar och skapa en övergripande struktur för min applikation samt rita ett UML diagram. Jag fokuserade på att skriva ren, lättläst och välstrukturerad kod för att göra det lättare att förstå och underhålla koden i framtiden.
                        <br><br>
                        Min TIL är att jag fick träna på de objektorienterade konstruktionerna samt implementera de i min kod.


                    </p>
                </div>
                <div class="item" id="kmom03">
                    <h2>Kmom03</h2>
                    <p>
                        I kmom03 har vi fortsatt att jobba med klasser genom att skapa ett blackjackspel med hjälp av lek kort klasserna från föregående kursmoment.
                        <br>
                        Jag ritade upp ett flödesdiagram och tyckte att det var en enkel uppgift som inte krävde pseudokod. 
                        <br>
                        Jag anser att pseudokod inte är viktig för enkelare projekt, utan främst användbart för mer avancerade projekt för att underlätta förståelsen av hur applikationen ska fungera.
                        <br>
                        I mitt fall designar jag vanligtvis applikationen först för att förstå dess funktionalitet.
                        <br><br>
                        Jag har skapat en klass vid namn "blackjackhand" som använder metoder som ärver från "cardhand".
                        <br>
                        "getPoints()" metoden finns inom "blackjackhand" och räknar ut poängen för korten i handen.
                        <br>
                        Efter jag skapade applikationen och skulle göra API insåg jag att koden i appen och API:n nästan var identisk, enda skillnaden var sättet datan skulle returneras på.
                        <br>
                        Därför skapade jag "cardgamefuncs" klassen för att samla alla blackjackfunktioner och använde sedan denna klass i både API och appen (komposition) för att följa DRY-regeln. Jag är väldigt nöjd med hur implementationen blev.
                        <br><br>
                        Personligen har jag inte märkt någon stor skillnad mellan att använda Symfony och att använda vanilla PHP.
                        <br>
                        De funktioner som finns tillgängliga i Symfony kan enkelt skapas eller användas som bibliotek i vanilla PHP.
                        <br>
                        Eftersom vi bara är i kmom03 just nu, finns det möjlighet att vi kommer att lära oss mer om Symfony i de framtida kurserna.
                        <br><br>
                        Mitt TIL för idag att träna på flödesdiagram samt psuedokod. Jag kommer definitivt använda när det behövs.
                    </p>
                </div>
            </div>
        </div>
    </div>
{% endblock %}